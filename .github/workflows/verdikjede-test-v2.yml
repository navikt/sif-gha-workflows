name: Tester saksbehandling - v2 (reusable)
on:
  workflow_call:
    inputs:
      tag:
        type: string
        description: 'Docker tag (from repository) - deprecated, use image_version'
        required: true
      suites:
        type: string
        description: 'komma-separert liste med test-suiter som skal kjøres (default alle): pleiepenger, annet, klage, tilbake, frontend, frontend-los, ung, beregning, pleiepenger-samtidiguttak, pleiepenger-pleietrengende, pleiepenger-soker, opplaeringspenger.'
        required: false
        default: "pleiepenger,livetssluttfase,annet,klage,tilbake,frontend,frontend-los,beregning,pleiepenger-samtidiguttak,pleiepenger-pleietrengende,pleiepenger-soker,opplaeringspenger"
      override_image_artifact_name:
        type: string
        required: false
        description: 'Artifact name of docker image to download and load.'
      image_version:
        type: string
        required: true
        description: 'Version/tag of image. '
      k9-verdikjede-sha:
        type: string
        required: false
        default: 'master'
        description: 'branch, tag or sha of k9-verdikjede to checkout'
    outputs:
      pleiepenger-pleietrengende:
        description: "Utfall fra pleiepenger-pleietrengende-test"
        value: ${{ jobs.run_tests.outputs.pleiepenger-pleietrengende }}
      pleiepenger-soker:
        description: "Utfall fra pleiepenger-soker-test"
        value: ${{ jobs.run_tests.outputs.pleiepenger-soker }}
      pleiepenger-samtidiguttak:
        description: "Utfall fra pleiepenger-samtidiguttak-test"
        value: ${{ jobs.run_tests.outputs.pleiepenger-samtidiguttak }}
      beregning:
        description: "Utfall fra beregning-test"
        value: ${{ jobs.run_tests.outputs.beregning }}
      pleiepenger:
        description: "Utfall fra pleiepenger-test"
        value: ${{ jobs.run_tests.outputs.pleiepenger }}
      livetssluttfase:
        description: "Utfall fra livetssluttfase-test"
        value: ${{ jobs.run_tests.outputs.livetssluttfase }}
      annet:
        description: "Utfall fra annet-test"
        value: ${{ jobs.run_tests.outputs.annet }}
      frontend:
        description: "Utfall fra frontend-test"
        value: ${{ jobs.run_tests.outputs.frontend }}
      klage:
        description: "Utfall fra klage-test"
        value: ${{ jobs.run_tests.outputs.klage }}
      tilbake:
        description: "Utfall fra tilbake-test"
        value: ${{ jobs.run_tests.outputs.tilbake }}
      frontend-los:
        description: "Utfall fra frontend-test"
        value: ${{ jobs.run_tests.outputs.frontend-los }}
      ung:
        description: "Utfall fra ungdomsytelse-test"
        value: ${{ jobs.run_tests.outputs.ung }}
      opplaeringspenger:
        description: "Utfall fra opplaeringspenger-test"
        value: ${{ jobs.run_tests.outputs.opplaeringspenger }}

jobs:
  # Filtrerer ut suite som skal velges i matrix kjøringen. Vanlig måte er å bruke if i matrix jobben, men det spinner opp cluster så bruker denne workarouden.
  filter_suites:
    env:
      SUITES: |
        [
          {
            "suite": "pleiepenger-pleietrengende",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml ",
            "test_groups": "-Dgroups=pleiepenger-pleietrengende '-Dtest=!PleiepengerLoggTest'",
            "log_groups": "-Dgroups=etter-pleiepenger"
          },
          {
            "suite": "pleiepenger-soker",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml ",
            "test_groups": "-Dgroups=pleiepenger-soker '-Dtest=!PleiepengerLoggTest'",
            "log_groups": "-Dgroups=etter-pleiepenger"
          },
          {
            "suite": "pleiepenger-samtidiguttak",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml ",
            "test_groups": "-Dgroups=pleiepenger-samtidiguttak '-Dtest=!PleiepengerLoggTest'",
            "log_groups": "-Dgroups=etter-pleiepenger"
          },
          {
            "suite": "beregning",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml ",
            "test_groups": "-Dgroups=beregning '-Dtest=!PleiepengerLoggTest'",
            "log_groups": "-Dgroups=etter-pleiepenger"
          },
          {
            "suite": "pleiepenger",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml ",
            "test_groups": "-Dgroups=pleiepenger '-Dtest=!PleiepengerLoggTest'",
            "log_groups": "-Dgroups=etter-pleiepenger"
          },
          {
            "suite": "livetssluttfase",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml",
            "test_groups": "-Dgroups=livetssluttfase",
            "log_groups": "-Dgroups=etter-livetssluttfase"
          },
          {
            "suite": "klage",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-klage.yml -f docker-compose-testsuites/gha/docker-compose-klage-gha.yml ",
            "test_groups": "-Dgroups=klage ",
            "log_groups": "-Dgroups=etter"
          },
          {
            "suite": "annet",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-omsorgspenger.yml -f docker-compose-testsuites/gha/docker-compose-omsorgspenger-gha.yml",
            "test_groups": "-DexcludedGroups=frontendtest,frontendtest-los,pleiepenger,beregning,pleiepenger-soker,pleiepenger-samtidiguttak,pleiepenger-pleietrengende,livetssluttfase,klage,tilbakekreving,ung,opplaeringspenger,etter-frontendtest,etter-pleiepenger,etter-livetssluttfase,etter-tilbakekreving,etter,frontend-data-generator",
            "log_groups": "-Dgroups=etter"
          },
          {
            "suite": "tilbake",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-tilbake.yml -f docker-compose-testsuites/gha/docker-compose-tilbake-gha.yml",
            "test_groups": "-Dgroups=tilbakekreving ",
            "log_groups": "-Dgroups=etter-tilbakekreving "
          },
          {
            "suite": "frontend",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-frontend.yml -f docker-compose-testsuites/gha/docker-compose-frontend-gha.yml",
            "test_groups": "-Dgroups=frontendtest ",
            "log_groups": "-Dgroups=etter-frontendtest "
          },
          {
            "suite": "frontend-los",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-frontend-los.yml -f docker-compose-testsuites/gha/docker-compose-frontend-los-gha.yml",
            "test_groups": "-Dgroups=frontendtest-los ",
            "log_groups": "-Dgroups=etter-frontendtest "
          },
          {
            "suite": "ung",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-ung.yml -f docker-compose-testsuites/gha/docker-compose-ung-gha.yml ",
            "test_groups": "-Dgroups=ung",
            "log_groups": "-Dgroups=etter-pleiepenger"
          },
          {
            "suite": "fordel",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml ",
            "test_groups": "-Dgroups=med-k9-fordel",
            "log_groups": "-Dgroups=etter-pleiepenger"
          },
          {
            "suite": "opplaeringspenger",
            "docker_compose_f": "-f docker-compose-testsuites/docker-compose-pleiepenger.yml -f docker-compose-testsuites/gha/docker-compose-pleiepenger-gha.yml ",
            "test_groups": "-Dgroups=opplaeringspenger",
            "log_groups": "-Dgroups=etter-pleiepenger"
          }
        ]
    name: Avgjør testsuiter som skal kjøres
    runs-on: ubuntu-latest
    outputs:
      active_suites: ${{ steps.filterstep.outputs.filtered }}
    steps:
      - id: filterstep
        run: |
          filtered_json=$(echo $SUITES | jq -c --arg suites "${{inputs.suites}}" '[.[] | select(.suite as $suite | ($suites | split(",") | index($suite)) != null)]' )  >> $GITHUB_OUTPUT
          echo "active suites:"
          echo $filtered_json
          echo "filtered=$filtered_json" >> $GITHUB_OUTPUT

  run_tests:
    name: Tests
    runs-on: ${{ (github.ref_name == github.event.repository.default_branch && 'ubuntu-latest-8-cores' || 'ubuntu-latest-4-cores') }}
    needs: filter_suites
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        suites: ${{ fromJson(needs.filter_suites.outputs.active_suites) }}
    outputs:
      pleiepenger: ${{ steps.resultat.outputs.pleiepenger }}
      klage: ${{ steps.resultat.outputs.klage }}
      livetssluttfase: ${{ steps.resultat.outputs.livetssluttfase }}
      annet: ${{ steps.resultat.outputs.annet}}
      tilbake: ${{ steps.resultat.outputs.tilbake }}
      frontend: ${{ steps.resultat.outputs.frontend }}
      frontend-los: ${{ steps.resultat.outputs.frontend-los }}
      ung: ${{ steps.resultat.outputs.ung }}
      fordel: ${{ steps.resultat.outputs.fordel }}
      beregning: ${{ steps.resultat.outputs.beregning }}
      pleiepenger-samtidiguttak: ${{ steps.resultat.outputs.pleiepenger-samtidiguttak }}
      pleiepenger-pleietrengende: ${{ steps.resultat.outputs.pleiepenger-pleietrengende }}
      pleiepenger-soker: ${{ steps.resultat.outputs.pleiepenger-soker }}
      opplaeringspenger: ${{ steps.resultat.outputs.opplaeringspenger }}
    steps:
      - uses: navikt/sif-gha-workflows/.github/actions/maven/verdikjede-test-v2@docker-cache
        id: verdikjede-action
        with:
          test_suite: ${{ matrix.suites.suite }}
          test_groups: ${{ matrix.suites.test_groups }}
          log_groups: ${{ matrix.suites.log_groups }}
          docker_compose_f: ${{ matrix.suites.docker_compose_f }}
          override_image_artifact_name: ${{ inputs.override_image_artifact_name }}
          image_version: ${{ inputs.image_version }}
          timeout_test_increase: ${{ github.ref_name != github.event.repository.default_branch && '60' || '0' }}
          k9-verdikjede-sha: ${{ inputs.k9-verdikjede-sha }}
          # Composite actions arver ikke secrets så vi må få dem in som input
          github-token: ${{ secrets.GITHUB_TOKEN }}
          reader-token: ${{ secrets.READER_TOKEN }}
          cache_dir: 'cacheTmp'
      - id: resultat
        if: always() && !cancelled()
        run: |
          echo "${{ matrix.suites.suite }}=${{ steps.verdikjede-action.outputs.test_result }}" >> $GITHUB_OUTPUT
  

  generate_cache:
    name: Opprett cache
    #if: ${{ github.ref_name == github.event.repository.default_branch }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'navikt/k9-verdikjede'
          ref: ${{ inputs.k9-verdikjede-sha }}
          token: ${{ secrets.READER_TOKEN }}

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: nais/login@8ebbba35984d713e500e5d6c4ceec1cf3026e30c
        with:
          team: k9saksbehandling

      - name: Print time
        shell: bash
        run: |
          echo "$(date)"

      - uses: actions/cache/restore@v4
        id: cache-restore
        with:
          path: cacheTmp
          key: cache-tmp-${{ runner.os }}
          restore-keys: |
            cache-tmp-${{ runner.os }}

      - name: Load cache
        if: steps.cache-restore.outputs.cache-hit == 'true'
        shell: bash
        run: |
          echo "$(date)"
          for file in cacheTmp/docker/*.tar; do
            docker load -i $file;
          done
          echo "$(date)"

      - name: Setup saksbehandling-stack
        shell: bash
        run: |
          mkdir -p cacheTmp/docker
          cd saksbehandling
          ./update-versions.sh
          cat .env
  
          tid_for=$(date +"%Y-%m-%dT%H:%M:%S")        
          docker compose --env-file .env pull --ignore-pull-failures --quiet || (docker ps ; echo "Nedlasting av images feilet." ; exit 1)        
          tid_etter_pull=$(date +"%Y-%m-%dT%H:%M:%S")
          
          
          for image in $(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep :latest); do
            image_name=$(echo $image | rev | cut -d / -f 1 | rev | cut -d : -f 1);
            docker image save -o ../cacheTmp/docker/$image_name.tar $image;
          done
          tid_etter_save=$(date +"%Y-%m-%dT%H:%M:%S")
        
          duration_pull=$(( $(date -d "$tid_etter_pull" +%s) - $(date -d "$tid_for" +%s) ))
          duration_save=$(( $(date -d "$tid_etter_save" +%s) - $(date -d "$tid_etter_pull" +%s) ))
          echo "Tid brukt på docker compose pull: $(date -u -d @"$duration_pull" +"%M:%S") min"
          echo "Tid brukt på docker save: $(date -u -d @"$duration_save" +"%M:%S") min"

      - uses: actions/cache/save@v4
        id: cache-save
        with:
          path: cacheTmp
          key: cache-tmp-${{ runner.os }}-${{ github.run_id }}

  
  slack:
    name: Sender slack melding
    if: ${{ github.ref_name == github.event.repository.default_branch && always() && !cancelled() }}
    needs: [run_tests]  
    runs-on: ubuntu-latest
    steps:
      - name: Bygger opp slack melding
        run: |
          beregning="${{ needs.run_tests.outputs.beregning || 'skipped' }}"
          pleiepengersamtidiguttak="${{ needs.run_tests.outputs.pleiepenger-samtidiguttak || 'skipped' }}"
          pleiepengerpleietrengende="${{ needs.run_tests.outputs.pleiepenger-pleietrengende || 'skipped' }}"
          pleiepengersoker="${{ needs.run_tests.outputs.pleiepenger-soker || 'skipped' }}"
          pleiepenger="${{ needs.run_tests.outputs.pleiepenger || 'skipped' }}"
          livetssluttfase="${{ needs.run_tests.outputs.livetssluttfase || 'skipped' }}"
          annet="${{ needs.run_tests.outputs.annet || 'skipped' }}"
          klage="${{ needs.run_tests.outputs.klage || 'skipped' }}"
          tilbake="${{ needs.run_tests.outputs.tilbake || 'skipped' }}"
          frontend="${{ needs.run_tests.outputs.frontend || 'skipped' }}"
          frontendlos="${{ needs.run_tests.outputs.frontend-los || 'skipped' }}"
          ung="${{ needs.run_tests.outputs.ung || 'skipped' }}"
          fordel="${{ needs.run_tests.outputs.fordel || 'skipped' }}"
          opplaeringspenger="${{ needs.run_tests.outputs.opplaeringspenger || 'skipped' }}"

          title="Verdikjede er "
          all_success=true

          test_results=("$beregning" "$pleiepengersamtidiguttak" "$pleiepengerpleietrengende" "$pleiepengersoker" "$pleiepenger" "$livetssluttfase" "$annet" "$frontend" "$klage" "$tilbake" "$frontendlos" "$ung" "$fordel" "$opplaeringspenger")
          for result in "${test_results[@]}"; do
            if [[ "$result" != 'success' && "$result" != 'skipped' ]]; then
              all_success=false
              break
            fi
          done
  
          if [[ "$all_success" == true ]]; then
            title+="kjørt UTEN feil :rocket:"
          else
            title+="brukket :boom:"
          fi
  
          echo "SLACK_TITLE=$title" >> $GITHUB_ENV
  
          function echoStatus() {
            if [[ "$2" == 'success' ]]; then
              echo ":heavy_check_mark:  $1"
            elif [[ "$2" == 'skipped' ]]; then
              return
            else
              echo ":x:  $1"
            fi
          }
  
          echo 'SLACK_MESSAGE<<\n' >> $GITHUB_ENV
          echoStatus "Pleiepenger samtidig uttak" $pleiepengersamtidiguttak >> $GITHUB_ENV
          echoStatus "Pleiepenger pleietrengende" $pleiepengerpleietrengende >> $GITHUB_ENV
          echoStatus "Pleiepenger søker" $pleiepengersoker >> $GITHUB_ENV
          echoStatus "Beregning" $beregning >> $GITHUB_ENV
          echoStatus "Pleiepenger" $pleiepenger >> $GITHUB_ENV
          echoStatus "Livets sluttfase" $livetssluttfase >> $GITHUB_ENV
          echoStatus "Frontend" $frontend >> $GITHUB_ENV
          echoStatus "Omsorgspenger og annet" $annet >> $GITHUB_ENV
          echoStatus "Klage" $klage >> $GITHUB_ENV
          echoStatus "Tilbakekreving" $tilbake >> $GITHUB_ENV
          echoStatus "Frontend Los" $frontendlos >> $GITHUB_ENV
          echoStatus "Ungdomsytelsen" $ung >> $GITHUB_ENV
          echoStatus "Fordel" $fordel >> $GITHUB_ENV
          echoStatus "Opplæringspenger" $opplaeringspenger >> $GITHUB_ENV
          echo '*Actor*: ${{ github.actor }}' >> $GITHUB_ENV
          echo '*Trigger*: ${{ github.repository }}:${{ inputs.tag }}' >> $GITHUB_ENV
          echo '*Trigger action*: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Trigger action ${{ github.run_id }}>' >> $GITHUB_ENV
          echo '\n' >> $GITHUB_ENV
        # https://api.slack.com/block-kit
      - name: Slack message
        run: |
          echo "${{ env.SLACK_TITLE }}"
          echo "${{ env.SLACK_MESSAGE }}"
      - name: Slack Notification
        run: >
          curl -X POST
          -H 'Content-type: application/json'
          --data '{"blocks": [
            {
              "type": "header",
              "text": {"type": "plain_text", "text": "${{ env.SLACK_TITLE }}"}
            },
            {
              "type": "section",
              "text": {"type": "mrkdwn", "text": "${{ env.SLACK_MESSAGE }}"}
            }
          ]}'
          ${{ secrets.SLACKBOT_WEBHOOK }}
